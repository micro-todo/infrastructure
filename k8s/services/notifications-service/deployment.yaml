apiVersion: apps/v1
kind: Deployment
metadata:
  name: notifications-service
  namespace: microtodo
spec:
  replicas: 2
  selector:
    matchLabels:
      app: notifications-service
  template:
    metadata:
      labels:
        app: notifications-service
    spec:
      containers:
      - name: notifications-service
        image: 768881856011.dkr.ecr.eu-west-2.amazonaws.com/microtodo/notifications-service:latest
        ports:
        - containerPort: 3000
        env:
        - name: DATABASE_URL
          value: "postgresql://$(DATABASE_USERNAME):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)"
        - name: RMQ_URL
          value: "amqp://$(RABBITMQ_USERNAME):$(RABBITMQ_PASSWORD)@$(RABBITMQ_HOST):$(RABBITMQ_PORT)"
        - name: DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
              name: microtodo-secrets
              key: postgres-username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: microtodo-secrets
              key: postgres-password
        - name: RABBITMQ_USERNAME
          valueFrom:
            secretKeyRef:
              name: microtodo-secrets
              key: rabbitmq-username
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: microtodo-secrets
              key: rabbitmq-password
        envFrom:
        - configMapRef:
            name: notifications-service-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
